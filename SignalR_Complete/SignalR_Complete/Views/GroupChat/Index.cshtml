@model GroupChatViewModel

<style>
    #chat-messages {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }

    .message {
        display: flex;
        flex-direction: column;
        margin-bottom: 5px;
    }

    .sender {
        align-self: flex-end;
        max-width: 40%;
        background-color: lightblue;
        padding: 5px;
        border-radius: 10px;
        margin-left: 50px;
    }

    .receiver {
        align-self: flex-start;
        background-color: lightgreen;
        padding: 5px;
        border-radius: 10px;
        margin-right: 50px;
    }


    .message span {
        font-size: 12px;
    }
</style>

<h1>@Model.Group.Name</h1>

<div id="chat-messages">
    @foreach (var message in Model.Messages)
    {
        var messageClass = (message.SenderId == ViewBag.senderId) ? "sender" : "receiver";
        <div class="message @messageClass" data-message-id="@message.Id">

            @foreach (var users in Model.User)
            {
                if (users.Id == message.SenderId)
                {
                    <span style="color:gray">@users.UserName</span>
                }
            }
            <span style="color:gray"></span>
            <span style="font-weight:bolder;font-size:16px">@message.Message</span>
            <span style="color:gray">@message.Timestamp.ToString("MM/dd/yyyy HH:mm:ss")</span>
            @if (message.SenderId == ViewBag.senderId)
            {
                <div class="row justify-content-end mr-1">
                    <button class="btn delete-button" data-id="@message.Id">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>

<form id="chat-form">
    <div class="row">
        <div class="col-10">
            <textarea id="message-input" rows="2" class="form-control border-primary"></textarea>
        </div>
        <div class="col-2">
            <button type="button" class="btn border-primary h-100" style="max-height: 50px; min-width: 45px;margin-top:2px" >
                <i class="fa-solid fa-file-image"></i>
            </button>
            <button type="submit" class="btn border-primary h-100" style="max-height: 50px; min-width: 45px; margin-top: 2px">
                <i class="fa-solid fa-paper-plane" style="font-size:22px"></i>
            </button>
        </div>
    </div>
    
</form>

@section scripts {

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

    <script>
        //_______________________  SignalR Connection _________________________
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub", {
                skipNegotiation: true,
                transport: signalR.HttpTransportType.WebSockets
            })
            .build();

        //____ Testing Connection _____
        connection.start()
            .then(function () {
                console.log("Connection started.");
            })
            .catch(function (error) {
                console.error("Error starting connection: " + error);
            });


        //_______________________  Sending Message _________________________
        connection.on("ReceiveGroupMessage", function (groupId, senderId,groupMessageId, message, timestamp, isCurrentUser) {
            var senderName = isCurrentUser ? "You" : GetDisplayName(senderId);
            var formattedTimestamp = new Date(timestamp).toLocaleString();

            var messageElement = $("<div>").addClass("message").attr("data-message-id",groupMessageId);
            var senderElement = $("<span>").addClass(GetMessageClass(senderId)).text(senderName + ":");
            var messageTextElement = $("<span>").text(message).css({"font-weight": "bold", "font-size": "16px"});
            var timestampElement = $("<span>").text(formattedTimestamp);


            messageElement.append(senderElement);
            messageElement.append(messageTextElement);
            messageElement.append(timestampElement);


            if (isCurrentUser) {
                var trashDiv = $("<div>").addClass("row justify-content-end mr-1");
                var trashButton = $("<button>").addClass("btn delete-button").attr("data-id", groupMessageId);
                var trashIcon = $("<i>").addClass("fa-solid fa-trash");
                trashButton.append(trashIcon);
                trashDiv.append(trashButton);
                messageElement.append(trashDiv);
                messageElement.addClass("sender");
            } else {
                messageElement.addClass("receiver");
            }

            $("#chat-messages").append(messageElement);
        });

        $("#chat-form").on("submit", function (event) {
            event.preventDefault();

            var groupId = @Model.Group.Id;
            var message = $("#message-input").val();

            connection.invoke("SendGroupMessage", groupId, message)
                .then(function () {
                    $("#message-input").val(""); // Clear the input field after sending the message
                })
                .catch(function (error) {
                    console.error(error);
                });
        });


        //_______________________  Getting UserName for  Onload ,  Sending button _________________________
        function GetMessageClass(senderId) {
            var currentUser = '@User.Identity.Name';
            return senderId === currentUser ? "sender" : "receiver";
        }

        function GetDisplayName(senderId) {
            var currentUser = '@User.Identity.Name';

            // Make an AJAX request to fetch the username based on the senderId
            return $.ajax({
                url: '/GroupChat/GetUserName',
                data: { userId: senderId },
                async: false
            }).responseText;
        }


        //___________ Not good way to trriger delte button _______________
        @*function deleteGroupMessage(messageId) {
            var groupId = @Model.Group.Id;
            alert(groupId);
            alert(messageId);

            if (confirm("Are you sure you want to delete this message?")) {

                connection.invoke("DeleteGroupMessages",groupId,messageId)
                .then(function () {
                    $("#message-input").val(""); // Clear the input field after sending the message
                })
                .catch(function (error) {
                    console.error(error);
                });
            }
        }*@

        //___ will Not work if  Message is Generating by  JS on Sending button _______
        @*$(".delete-button").on("click", function (event) {
            var groupId = @Model.Group.Id;
            var messageId = $(this).attr("data-id");

            var gId = parseInt(groupId);
            var mId = parseInt(messageId);

            if (confirm("Are you sure you want to delete this message?")) {
                connection.invoke("DeleteGroupMessages",gId,mId)
                .then(function () {
                    $("#message-input").val(""); // Clear the input field after sending the message
                })
                .catch(function (error) {
                    console.error(error);
                });
            }
        })*@


        connection.on("GroupMessageDeleted", function (deletedGroupId, deletedMessageId) {
            if (deletedGroupId === @Model.Group.Id) {
                // Find the message element with the deletedMessageId and remove it from the DOM
                $("#chat-messages").find(".message[data-message-id='" + deletedMessageId + "']").remove();
            }
        });


        //______ to Delete  JS  text at runtime ____
        $(document).on("click", ".delete-button", function (event) {
            var groupId = @Model.Group.Id;
            var messageId = $(this).attr("data-id");

            var gId = parseInt(groupId);
            var mId = parseInt(messageId);

            if (confirm("Are you sure you want to delete this message?")) {
                connection.invoke("DeleteGroupMessages", gId, mId)
                    .then(function () {
                        // Optional: You can remove the message from the UI immediately without waiting for the server response.
                        $("#chat-messages").find(".message[data-message-id='" + messageId + "']").remove();

                        $("#message-input").val(""); // Clear the input field after sending the message
                    })
                    .catch(function (error) {
                        console.error(error);
                    });
             }
         });

        //__________ Onload  Go to end of page ___________
        $(document).ready(function() {
            // Scroll to the end of the page
            $("html, body").animate({ scrollTop: $(document).height() }, "slow");

            // Rest of your code...

            // SignalR Connection and other code...
        });
    </script>
}
